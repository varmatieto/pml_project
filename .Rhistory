testing = mixtures[-inTrain,]
dim (training)
str (training)
dim (testing)
str (testing)
library(Hmisc); library(gridExtra)
install.packages("gridExtra")
library(Hmisc); library(gridExtra)
names <- colnames(concrete)
names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
index
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point()
cutCompressiveStrength <- cut2(training$CompressiveStrength,g=4)
cutCompressiveStrength
ggplot(data = training, aes(y = index, x = cutCompressiveStrength)) + geom_boxplot() + geom_jitter(col="red")
summary (cutCompressiveStrength)
ggplot(data = training, aes(y = index,
x = cutCompressiveStrength)) + geom_boxplot() + geom_jitter(col="red")
featurePlot(x = training[, names], y = cutCompressiveStrength, plot = "box")
featurePlot(x = training[, "Age"], y = cutCompressiveStrength, plot = "box")
set.seed(2204)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram()
summary(training)
str(inTrain)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)
str(adData)
str(adData)
adData = data.frame(diagnosis,predictors)
set.seed(2204)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
str(adData)
class(adData)
str(inTrain)
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
str(training)
names <- colnames(training)
names <- names[grep("^IL",names)]
preProcess(training[,names],method="pca", thresh=0.9)
ggplot(data = training, aes(x = log10 (Superplasticizer)+1)) + geom_histogram()
ggplot(data = training, aes(x = log10 (training$Superplasticizer)+1)) + geom_histogram()
summary(training$Superplasticizer)
summary(training)
set.seed(2204)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training)
summary(training$Superplasticizer)
ggplot(data = training, aes(x = log10 (training$Superplasticizer)+1)) + geom_histogram()
set.seed(2204)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(Hmisc)
names <- colnames(training)
names <- names[grep("^IL",names)]
train<-training[,names]
test<-testing[,names]
preProc<-preProcess(train,method="pca", thresh=0.8)
g1<-train(training$diagnosis ~ ., method="glm", data=train)
IL_str <- grep("^IL", colnames(training), value = TRUE)
IL_str
predictors
dim(training)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
dim(training)
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
dim(df)
mytraining <- training[,c(IL_str,"diagnosis")]
dim(mytraining)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
Ttraining = adData[ inTrain,]
Ttesting = adData[-inTrain,]
dim(Ttraining)
IL_str <- grep("^IL", colnames(Ttraining), value = TRUE)
IL_str
training <- Ttraining[,c(IL_str,"diagnosis")]
dim(training)
testing <- Ttesting[,c(IL_str,"diagnosis")]
dim(training)
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
## get the confustion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
A1
modelFit1 <- train(diagnosis ~ ., method = "glm", data = training)
prediction1 <- predict(modelFit1, testing)
## get the confustion matrix for the first method
C1 <- confusionMatrix(prediction1, testing$diagnosis)
print(C1)
A1 <- C1$overall[1]
## do similar steps with the caret package
modelFit2 <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training,
trControl = trainControl(preProcOptions = list(thresh = 0.8)))
prediction2 <- predict(modelFit2, testing)
## get the confustion matrix for the first method
C2 <- confusionMatrix(prediction2, testing$diagnosis)
print(C2)
A2 <- C2$overall[1]
print (A1,A2)
print (c(A1,A2))
A2 <- round(C2$overall[1],2)
print (c(A1,A2))
A1 <- round(C1$overall[1],2)
print (c(A1,A2))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(2204)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training)
summary(training$Superplasticizer)
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram()
ggplot(data = training, aes(x = log10 (training$Superplasticizer)+1)) + geom_histogram()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(2204)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training)
summary(training$Superplasticizer)
ggplot(data = training, aes(x = Superplasticizer)) + geom_histogram()
ggplot(data = training, aes(x = log10 (training$Superplasticizer)+1)) + geom_histogram()
ggplot(data = training, aes(x = log10 (training$Superplasticizer+1)) + geom_histogram()
ggplot(data = training, aes(x = log10 (training$Superplasticizer+1) + geom_histogram()
(
ggplot (data = training, aes(x = log10 (training$Superplasticizer+1))) + geom_histogram()
ggplot (data = training, aes(x = log10 (training$Superplasticizer+1))) + geom_histogram()
log10(0)
log10(0)+1
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str (segmentationOriginal)
help (segmentationOriginal)
table(segmentationOriginal$Case)
segmentationOriginal$Case=="Test"
training = segmentationOriginal[segmentationOriginal$Case=="Train"]
training = segmentationOriginal[segmentationOriginal$Case=="Train",]
testing = segmentationOriginal[segmentationOriginal$Case=="Test",]
dim(training)
dim(testing)
set.seed(125)
modFit <- train(Class ~ .,method="rpart",data=training)
modFit <- train(Class ~ .,method="rpart",data=training, verbose=T)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
help (segmentationOriginal)
table(segmentationOriginal$Case)
training = segmentationOriginal[segmentationOriginal$Case=="Train",]
testing = segmentationOriginal[segmentationOriginal$Case=="Test",]
dim(training)
dim(testing)
set.seed(125)
modFit <- train(Class ~ .,method="rpart",data=training, verbose=T)
warnings()
dim(training)
dim(testing)
set.seed(125)
modFit <- train(Class ~ .,method="rpart",data=training, verbose=T)
dim(training)[,-"Case"]
head(training)[,"Case"]
dim(training[,-"Case"])
head(training[,-"Case"])
head(training[,"Case"])
training[,-"Case"]
training[,-Case]
colnames (training[-"Case"])
colnames (training["Case"])
colnames (training-["Case"])
which(names(training) != "Case")
which(names(training) == "Case")
head (training[,-2])
training2<- (training[,-2])
which(names(training) == "Class")
dim(training2)
dim(training)
set.seed(125)
modFit <- train(Class ~ .,method="rpart",data=training2, verbose=T)
modFit <- train(Class ~ .,method="rpart",data=training2)
print(modFit$finalModel)
a<-c(TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2 )
sumbit<-training2
submit<-training2
dim (submit)
submit<-training2[1:4,]
dim (submit)
submit <-NA
dim (submit)
submit<-training2[1:4,]
dim (submit)
submit[1:4,1:118] <-NA
dim (submit)
colnames (submit)
head (training2)[1:4,1:3]
head (submit)[1:4,1:3]
seq(4)
dim(testing)
submit[1:4,1]<-seq(4)
head (submit)[1:4,1:3]
submit[1:4,"TotalIntench2"]<-c (23000,50000,57000,0)
head (submit)[1:4,1:3]
submit[1:4,"TotalIntench2"]<-c (23000,50000,57000,0)
submit[1:4,"FiberWidthCh1"]<-c (10,10,8,8)
submit[1:4,"PerimStatusCh1"]<-c (2,NA,NA,2)
submit[1:4,"VarIntenCh4"]<-c (NA,100,100,100)
solution = predict(modFit, submit)
solution
submit
dim(submit)
dim(data)
?predict
?predict{caret}
as.character(solution)
solution = predict(modFit, new.data=submit)
solution = predict(modFit, newdata=submit)
as.character(solution)
submit<-training2[1:4,]
dim (submit)
submit[1:4,1:118] <-0
colnames (submit)
head (submit)[1:4,1:3]
submit[1:4,"TotalIntench2"]<-c (23000,50000,57000,0)
submit[1:4,"FiberWidthCh1"]<-c (10,10,8,8)
submit[1:4,"PerimStatusCh1"]<-c (2,NA,NA,2)
submit[1:4,"VarIntenCh4"]<-c (NA,100,100,100)
solution = predict(modFit, newdata=submit)
as.character(solution)
solution
submit[1:4,1] <-seq (4)
head (submit)[1:4,1:3]
submit[1:4,"TotalIntench2"]<-c (23000,50000,57000,0)
submit[1:4,"FiberWidthCh1"]<-c (10,10,8,8)
submit[1:4,"PerimStatusCh1"]<-c (2,NA,NA,2)
submit[1:4,"VarIntenCh4"]<-c (NA,100,100,100)
solution = predict(modFit, newdata=submit)
as.character(solution)
solution
submit<-training2[1:4,-2]
dim (submit)
submit[1:4,1:118] <-0
submit[1:4,1:117] <-0
submit[1:4,1] <-seq (4)
colnames (submit)
head (submit)[1:4,1:3]
submit[1:4,"TotalIntench2"]<-c (23000,50000,57000,0)
submit[1:4,"FiberWidthCh1"]<-c (10,10,8,8)
submit[1:4,"PerimStatusCh1"]<-c (2,NA,NA,2)
submit[1:4,"VarIntenCh4"]<-c (NA,100,100,100)
solution = predict(modFit, newdata=submit)
as.character(solution)
solution = predict(modFit, newdata=submit[2,])
as.character(solution)
solution = predict(modFit, newdata=submit[1,])
as.character(solution)
solution = predict(modFit, newdata=submit)
as.character(solution)
submitx<-submit[1,]
solution = predict(modFit, newdata=submitx)
as.character(solution)
submitx<-submit[2,]
solution = predict(modFit, newdata=submitx)
as.character(solution)
submitx<-submit[3,]
solution = predict(modFit, newdata=submitx)
as.character(solution)
submitx<-submit[4,]
solution = predict(modFit, newdata=submitx)
as.character(solution)
submit[1:4,"TotalIntench2"]<-c (23000,50000,57000,0)
submit[1:4,"FiberWidthCh1"]<-c (10,10,8,8)
submit[1:4,"PerimStatusCh1"]<-c (2,0,0,2)
submit[1:4,"VarIntenCh4"]<-c (0,100,100,100)
solution = predict(modFit, newdata=submit)
as.character(solution)
submit<-training2[1:4,-2]
dim (submit)
submit[1:4,1:117] <-0
submit[1:4,1] <-seq (4)
colnames (submit)
head (submit)[1:4,1:3]
submit[1:4,"TotalIntench2"]<-c (23000,50000,57000,0)
submit[1:4,"FiberWidthCh1"]<-c (10,10,8,8)
submit[1:4,"PerimStatusCh1"]<-c (2,0,0,2)
submit[1:4,"VarIntenCh4"]<-c (0,100,100,100)
solution = predict(modFit, newdata=submit)
as.character(solution)
str(submit)
?str
str(submit)[100:117]
dim (submit)
submit<-training2[1:4,-2]
dim (submit)
submit[1:4,1:117] <-0
submit[1:4,1] <-seq (4)
colnames (submit)
dim(training2)
head (training2)[1:4,1:3]
submit<-training2[1:4,]
dim (submit)
submit[1:4,1:117] <-0
submit[1:4,1] <-seq (4)
colnames (submit)
submit<-training2[1:4,-2]
dim (submit)
submit[1:4,1:117] <-0
submit[1:4,1] <-seq (4)
colnames (submit)
head (submit)[1:4,1:3]
submit[1:4,"TotalIntench2"]<-c (23000,50000,57000,0)
submit[1:4,"FiberWidthCh1"]<-c (10,10,8,8)
submit[1:4,"PerimStatusCh1"]<-c (2,0,0,2)
submit[1:4,"VarIntenCh4"]<-c (0,100,100,100)
only<-c("TotalIntench2","FiberWidthCh1","PerimStatusCh1","VarIntenCh4")
head(submit)[,only]
only<-c("Cell","TotalIntench2","FiberWidthCh1","PerimStatusCh1","VarIntenCh4")
head(submit)[,only]
solution = predict(modFit, newdata=submit)
as.character(solution)
print(modFit$finalModel)
submitx<-submit[,only]
submitx
solution = predict(modFit, newdata=submitx)
colnames (submit)
submit<-training2[1:4,-2]
dim (submit)
submit[1:4,1:117] <-NA
submit[1:4,1] <-seq (4)
colnames (submit)
head (submit)[1:4,1:3]
submit[1:4,"TotalIntench2"]<-c (23000,50000,57000,0)
submit[1:4,"FiberWidthCh1"]<-c (10,10,8,8)
submit[1:4,"PerimStatusCh1"]<-c (2,0,0,2)
submit[1:4,"VarIntenCh4"]<-c (0,100,100,100)
only<-c("Cell","TotalIntench2","FiberWidthCh1","PerimStatusCh1","VarIntenCh4")
head(submit)[,only]
solution = predict(modFit, newdata=submit)
as.character(solution)
submit[1:4,"TotalIntench2"]<-c (23000,50000,57000,NA)
submit[1:4,"FiberWidthCh1"]<-c (10,10,8,8)
submit[1:4,"PerimStatusCh1"]<-c (2,NA,NA,2)
submit[1:4,"VarIntenCh4"]<-c (NA,100,100,100)
only<-c("Cell","TotalIntench2","FiberWidthCh1","PerimStatusCh1","VarIntenCh4")
head(submit)[,only]
solution = predict(modFit, newdata=submit)
as.character(solution)
submit<-training2[1:4,-2]
dim (submit)
submit[1:4,1:117] <-0
submit[1:4,1] <-seq (4)
colnames (submit)
head (submit)[1:4,1:3]
submit[1:4,"TotalIntench2"]<-c (23000,50000,57000,NA)
submit[1:4,"FiberWidthCh1"]<-c (10,10,8,8)
submit[1:4,"PerimStatusCh1"]<-c (2,NA,NA,2)
submit[1:4,"VarIntenCh4"]<-c (NA,100,100,100)
only<-c("Cell","TotalIntench2","FiberWidthCh1","PerimStatusCh1","VarIntenCh4")
head(submit)[,only]
solution = predict(modFit, newdata=submit)
as.character(solution)
submit<-training2[1:4,-2]
dim (submit)
submit[1:4,1:117] <-0
submit[1:4,1] <-seq (4)
colnames (submit)
head (submit)[1:4,1:3]
submit[1:4,"TotalIntench2"]<-c (23000,50000,57000,0)
submit[1:4,"FiberWidthCh1"]<-c (10,10,8,8)
submit[1:4,"PerimStatusCh1"]<-c (2,0,0,2)
submit[1:4,"VarIntenCh4"]<-c (0,100,100,100)
only<-c("Cell","TotalIntench2","FiberWidthCh1","PerimStatusCh1","VarIntenCh4")
head(submit)[,only]
solution = predict(modFit, newdata=submit)
as.character(solution)
solution = predict(modFit, newdata=submit,na.action=na.pass))
as.character(solution)
solution = predict(modFit, newdata=submit,na.action=na.pass)
as.character(solution)
library(rattle)
fancyRpartPlot(modFit$finalModel)
submit[1:4,"TotalIntench2"]<-c (23000,50000,57000,NA)
submit[1:4,"FiberWidthCh1"]<-c (10,10,8,8)
submit[1:4,"PerimStatusCh1"]<-c (2,0,0,2)
submit[1:4,"VarIntenCh4"]<-c (0,100,100,100)
only<-c("Cell","TotalIntench2","FiberWidthCh1","PerimStatusCh1","VarIntenCh4")
head(submit)[,only]
submit[1:4,"TotalIntench2"]<-c (23000,50000,57000,NA)
submit[1:4,"FiberWidthCh1"]<-c (10,10,8,8)
submit[1:4,"PerimStatusCh1"]<-c (2,0,0,2)
submit[1:4,"VarIntenCh4"]<-c (0,100,100,100)
only<-c("Cell","TotalIntench2","FiberWidthCh1","PerimStatusCh1","VarIntenCh4")
head(submit)[,only]
solution = predict(modFit, newdata=submit,na.action=na.pass)
as.character(solution)
solution = predict(modFit, newdata=submit,type = "raw")
as.character(solution)
solution = predict(modFit, newdata=submit, type = "prob")
as.character(solution)
solution = predict(modFit, newdata=submit, verbose=T")
solution = predict(modFit, newdata=submit, verbose=T)
dim (submit)
submit<-training2[1:4,-2]
dim (submit)
submit[1:4,1:117] <-0
submit[1:4,1] <-seq (4)
colnames (submit)
head (submit)[1:4,1:3]
submit[1:4,"TotalIntench2"]<-c (23000,50000,57000,NA)
submit[1:4,"FiberWidthCh1"]<-c (10,10,8,8)
submit[1:4,"PerimStatusCh1"]<-c (2,0,0,2)
submit[1:4,"VarIntenCh4"]<-c (0,100,100,100)
only<-c("Cell","TotalIntench2","FiberWidthCh1","PerimStatusCh1","VarIntenCh4")
head(submit)[,only]
solution = predict(modFit, newdata=submit, verbose=T)
as.character(solution)
library(caret, quietly=TRUE)
url_train <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
url_test <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
if (!file.exists('~/GitHub/pml_project/data/data_train.csv')) {
download.file(url = url_train, destfile = 'data_train.csv')
}
if (!file.exists('~/GitHub/pml_project/data/data_test.csv')) {
download.file(url = url_test, destfile = 'data_test.csv')
}
pml_train <- read.csv(file = '~/GitHub/pml_project/data/data_train.csv',
na.strings = c('NA','#DIV/0!',''))
pml_submit <- read.csv(file = '~/GitHub/pml_project/data/data_test.csv',
na.strings = c('NA','#DIV/0!',''))
colnames(pml_submit)[colna0]
features <- colnames(pml_submit[colna0])[8:59]
data <- pml_train[,c(features,"classe")]
submit <- pml_submit[,c(features,"problem_id")]
colna0<-colSums(is.na(pml_submit)) == 0
colnames(pml_submit)[colna0]
features <- colnames(pml_submit[colna0])[8:59]
data <- pml_train[,c(features,"classe")]
submit <- pml_submit[,c(features,"problem_id")]
dim(data)
dim(submit)
set.seed(2204)
inTrain = createDataPartition(data$classe, p = 0.75, list = F)
training = data[inTrain,]
testing = data[-inTrain,]
dim(training)
dim(testing)
set.seed(4543)
data.rf <- randomForest(classe ~ ., data = training,
keep.forest=FALSE, importance=TRUE)
library (randomForest)
data.rf <- randomForest(classe ~ ., data = training,
keep.forest=FALSE, importance=TRUE)
importance(mtcars.rf, type=1)
importance(data.rf, type=1)
myimportance<-importance(data.rf, type=1)
sort (myimportance)
myimportance[sort (myimportance)]
myimportance[sort (myimportance$MeanDecreaseAccuracy)]
names( myimportance[sort (myimportance)])
round( myimportance[sort (myimportance)],2)
importance(data.rf, type=1)
importance(data.rf)
myimportance<-importance(data.rf, type=1)
myimportance
sort (myimportance)
colnames(data)[sort (myimportance)])
colnames(data)[sort (myimportance)]
colnames(data)[sort (-myimportance)]
c(colnames(data)[sort (-myimportance)],sort (-myimportance))
plot (sort (myimportance))
boxplot (sort (myimportance))
summary(myimportance)
plot (sort (myimportance))
colnames(data)[sort (myimportance)]
myimportance
plot (sort (myimportance))
plot (sort (myimportance),col=red)
plot (sort (myimportance),col="red")
setwd("~/GitHub/pml_project")
